# Desatualizado

from FBot import *
import pygame
import os

#######  Definições  #######

corredor = Salas(100, 500, 600, 100)
Sala = Salas(100, 100, 600, 400)

ListaB1 = ListaBot(10, 15, Sala)
ListaB2 = ListaBot(4, 15, corredor)

######### Coração do código ##########

class Game: # Funções Principais do S.I.M.A
    def __init__(self, screenSize : (int, int), fps = 60, title = 'Game', icon = None, flags = 0):
        # Definições Inicias
        self.gameRunning = True
        self.screenSize = screenSize
        
        self.title = title
        self.fps = fps
        self.icon = icon
        self.flags = flags

        self.initGame()

    def initGame(self):
        # Define a Tela, fonte e "relógio" da simulação
        self.screen = pygame.display.set_mode(self.screenSize, flags = self.flags)
        pygame.display.set_caption(self.title)

        if(self.icon != None):
            pygame.display.set_icon(self.icon)
        
        pygame.font.init()

        self.gameClock = pygame.time.Clock()
        self.gameFont = pygame.font.SysFont('Arial', 35)

    def loadImgagePacket(self, imagePath, prefixImageName, numSprite, scaleSprite = (1, 1)):
        sprites = []
        
        for n_sprite in range(0, numSprite):
            tempImageName = prefixImageName + '_'+ str(n_sprite) + '.png'
            folderImage = os.path.join(imagePath, tempImageName)
            print(f'Loading Image: {folderImage}')
            tempImageSurface = pygame.image.load(folderImage).convert_alpha()
            tempImageSurface = pygame.transform.scale(tempImageSurface, (int))

    def gameMain(self):
        # Limpa/ atualiza a tela, marca o tempo e realiza as etapas da simulação
        while self.gameRunning:
            self.deltaTime = self.gameClock.tick(self.fps)
            self.screen.fill((0, 0, 0))

            for event in pygame.event.get():
                self.gameEvent(event)

            self.gameUpdate()
            self.gameRender()

            pygame.display.update()

        pygame.display.quit()

    def gameEvent(self, event):
        # Verifica se o "QUIT" ou "ESC" foram precionados, se sim, fecha a simulação
        if(event.type == pygame.QUIT):
            self.gameRunning = False
        if(event.type == pygame.KEYDOWN):
            if(event.key == pygame.K_ESCAPE):
                self.gameRunning = False

    def gameUpdate(self):
        
        AtualizaBots(ListaB1, Sala, self.deltaTime)
        AtualizaBots(ListaB2, corredor, self.deltaTime)

    def gameRender (self):

        # Desenhando corredor
        pygame.draw.rect(self.screen, (169, 169, 169), (corredor.x, corredor.y, corredor.largura, corredor.altura) )

        # Desenhando Sala
        pygame.draw.rect(self.screen, (211, 211, 211), (Sala.x, Sala.y, Sala.largura, Sala.altura))
        
        DesenhaBots(ListaB1, self.screen)
        DesenhaBots(ListaB2, self.screen)
    
game = Game((800, 600), title = 'S.I.M.A')
game.gameMain()
