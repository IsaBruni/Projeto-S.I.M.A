# FBotP.py

import pygame
import numpy as np
import random as rd

FPS = 60

Angle = (np.pi / 4)

def Randc(): # Randomiza uma Cor
    return rd.uniform(0, 255)

#### Classes ####

class BOT: # Cria as características da classe Bot 
    def __init__(self, x, y, velocidade_i, distanciamento):
        self.raio = 15
        self.dist = distanciamento
        self.x = x
        self.y = y
        self.velocidade_i = velocidade_i
        self.velocidade_x = velocidade_i
        self.velocidade_y = velocidade_i
        self.lv_x = self.velocidade_x
        self.lv_y = self.velocidade_y
        self.color = (Randc(), Randc(), Randc())
        self.color_o = self.color
        self.color_a = (255, 0, 0)
        self.dir = 1

        if(rd.uniform(0, 1) >= 0.5):
            self.dir = -1

        # randomiza o ângulo
        randAngle = rd.uniform(-Angle, Angle)

        # randomiza velocidade
        self.randVelocidade = rd.uniform(self.velocidade_x/1.2, self.velocidade_x*1.2)
        self.velocidade_x = self.dir * self.randVelocidade * np.cos(randAngle)
        self.velocidade_y = self.randVelocidade * np.sin(randAngle)

class Salas: # Cria as características da classe Sala
    def __init__(self, x, y, largura, altura):
        self.altura = altura
        self.largura = largura
        self.y = y
        self.x = x

class Player: # Cria as características da classe Player
    def __init__(self, x, y, r):
        self.x = x
        self.y = y
        self.r = r
        self.color = (Randc(), Randc(), Randc())
        self.color_o = self.color
        self.color_a = (255, 0, 0)

        self.last_x = 0 
        self.last_y = 0
        self.dir_x = 0
        self.dir_y = 0

#### Funções Bots #####

def ListaBot(n, dist, local): # Cria uma lista de [n] Bots com um distanciamento de [dist] em um determinado [local]
    lista = []
    for i in range(n):
        Bot = BOT( rd.randint(local.x + 25, local.x - 25 + local.largura), rd.randint(local.y + 25, local.y - 25 + local.altura), (1 / FPS) * 3, dist)
        if len(lista) >= 1:   
            for Bot2 in lista:
                if Bot != Bot2:                                                       
                    D = np.sqrt((Bot.x - Bot2.x)**2 +(Bot.y - Bot2.y)**2)
                    while D <= ((2 * Bot.raio) + (2* Bot.dist)): # Enquanto a colisão ocorrer, muda o x e y
                        Bot.x = rd.randint(local.x + 25, local.x - 25 + local.largura)
                        Bot.y = rd.randint(local.y + 25, local.y - 25 + local.altura)
                        D = np.sqrt((Bot.x - Bot2.x)**2 +(Bot.y - Bot2.y)**2)                                            
            lista.append(Bot)
        else:
            lista.append(Bot)
    return lista

def ListaRect(ListaBots): # Cria uma lista de Rects dos Bots de [ListaBots] para colisão
    listaRect = []
    for Bot in ListaBots:
        b = pygame.Rect(((Bot.x - Bot.raio) - (Bot.dist/2), (Bot.y - Bot.raio) - (Bot.dist/2) , 2*Bot.raio + (Bot.dist/2)*2 ,  2*Bot.raio + (Bot.dist/2)*2 ))
        listaRect.append(b)
    return listaRect

def ListaDist(ListaBots): # Cria uma lista de Rects dos Bots de [ListaBots] para alerta
    ListaDist = []
    for Bot in ListaBots:
        b = pygame.Rect(((Bot.x - Bot.raio) - Bot.dist, (Bot.y - Bot.raio) - Bot.dist, (2*Bot.dist) + 2*Bot.raio, (2*Bot.dist) + 2*Bot.raio))
        ListaDist.append(b)
    return ListaDist

def MudaDir(Bot1, Bot2, dir): # (Revisar) Muda as direções do [Bot1] e do [Bot2] 
        Bot1.lv_x = Bot1.velocidade_x
        Bot1.lv_y = Bot1.velocidade_y

        Bot2.lv_x = Bot2.velocidade_x
        Bot2.lv_y = Bot2.velocidade_y

        Bot1.velocidade_x = Bot2.lv_x
        Bot1.velocidade_y = Bot2.lv_y

        Bot2.velocidade_x = Bot1.lv_x
        Bot2.velocidade_y = Bot1.lv_y
                 
        dir = -dir 

def AlertaB(ListaBots, ListaDist): # Verifica o Distanciamento dos Bots de [ListaBots] e aciona o  Alerta
    for Rect in ListaDist:                                                               
        colisao = Rect.collidelist(ListaDist)                                                     # Verifica se a colisão ocorreu e retorna o indíce do objeto colidido
        Bot1 = ListaBots[ListaDist.index(Rect)]                                                   # ListaB[ListaD.index(Rect)] acha o objeto oqual o Rect corresponde
        Bot2 = ListaBots[colisao]                                                                 # ListaB[colisao] acha qual foi o objeto colidido
        if Rect != ListaDist[colisao]:                                                            # Se os Rects pertencerem a objetos diferentes
            if colisao != -1:                                                                     # Se ocorrer colisão
                Bot1.color = Bot1.color_a                                                         # Muda para a cor de alerta
                Bot2.color = Bot2.color_a                                                    
        else:
            Bot1.color = Bot1.color_o                                                             # Volta para a cor original
            Bot2.color = Bot2.color_o

def ColisaoB(ListaBots, ListaRect): # Verifica a colisão de dois bots e altera suas velocidades e direções
    for Rect in ListaRect:                                                               
        colisao = Rect.collidelist(ListaRect)                                                   
        dir = (ListaBots[ListaRect.index(Rect)].dir)
        Bot1 = ListaBots[ListaRect.index(Rect)]
        Bot2 = ListaBots[colisao]
        if Rect != ListaRect[colisao]:                                                          
            if colisao != -1 and dir == 1:                                                     
                MudaDir( Bot1, Bot2, dir)                                              
            elif colisao != -1 and dir == -1:                                                                   
                MudaDir( Bot1, Bot2, dir) 

def DesenhaBots(ListaBots, screen): # Desenha [ListaBots] em uma tela [screen]
    for Bot in ListaBots:
        pygame.draw.circle(screen, Bot.color, (Bot.x, Bot.y ), Bot.raio)

def MovLimite(local, ListaBots, time): # Define o limite do movimento [ListaBots] em certo [local] com base em um certo [tempo]
    for Bot in ListaBots: # "Colisão" com a borda da tela
        Bot.x += (Bot.velocidade_x) * time
        Bot.y += (Bot.velocidade_y) * time
        if(Bot.x <= (local.x + Bot.raio + 10) or Bot.x >= (local.x + local.largura - 10) - Bot.raio):
            Bot.velocidade_x = -Bot.velocidade_x
        if(Bot.y <= (local.y + Bot.raio + 10) or Bot.y >= (local.y + local.altura - 10) - Bot.raio):
            Bot.velocidade_y = -Bot.velocidade_y

#### Funções Player + Bots ####

def ColisaoP(ListaBots, player): # Verifica a colisão dos Bots de [ListaBots] com o [player] !!!ARRUMAR!!!
    for Bot in ListaBots:
        D = np.sqrt((Bot.x - player.x)**2 +(Bot.y - player.y)**2)
        Limite = ((2 * Bot.raio) + (2* Bot.dist))
        if  D <= Limite:             
            dir = Bot.dir                                                    
            if dir == -1:
                Bot.velocidade_x = -Bot.velocidade_x
                Bot.velocidade_y = -Bot.velocidade_y
                dir = - dir                                  
            elif dir == 1:
                Bot.velocidade_x = -Bot.velocidade_x
                Bot.velocidade_y = -Bot.velocidade_y
                dir = - dir

def AlertaP(player, ListaBots, ListaDist): # Verifica o Distanciamento do Bot de [ListaBots] com o player e aciona o  Alerta
    rectPlayer = pygame.Rect(((player.x - player.r) - 8, (player.y - player.r) - 8, player.r*2 + 16, player.r*2 + 16))                                                             
    colisao = rectPlayer.collidelist(ListaDist)                                                   # Verifica se a colisão ocorreu e retorna o indíce do objeto colidido                                                  # ListaB[ListaD.index(Rect)] acha o objeto oqual o Rect corresponde
    Bot = ListaBots[colisao]                                                                      # ListaB[colisao] acha qual foi o objeto colidido                                                         # Se os Rects pertencerem a objetos diferentes
    if colisao != -1:                                                                             # Se ocorrer colisão
        player.color = player.color_a                                                             # Muda para a cor de alerta
        Bot.color = Bot.color_a                                                    
    else:
        player.color = player.color_o                                                             # Volta para a cor original
        Bot.color = Bot.color_o

def NPessoas(ListaBots, player, sala_atual): # Conta nº de pessoas (Bot + player) na [sala_atual]
    RectSala = pygame.Rect(((sala_atual.x, sala_atual.y, sala_atual.largura, sala_atual.altura)))
    rectPlayer = pygame.Rect(((player.x - player.r) - 2, (player.y - player.r) - 2, player.r*2, player.r*2))

    if RectSala.contains(rectPlayer):
        N = len(ListaBots) + 1
    else:
        N = len(ListaBots)
    return N

def MovePlayer(player, keys, time, screen): # Movimenta o Player por meio de WASD e salva sua direção
    
    # Calcula a direção de movimento
    player.dir_x = 0
    player.dir_y = 0

    if keys[pygame.K_d]:    
        player.dir_x += 1
                
    if keys[pygame.K_a]:    
        player.dir_x -= 1
                
    if keys[pygame.K_w]:
        player.dir_y -= 1
                
    if keys[pygame.K_s]:
        player.dir_y += 1

    # Normaliza o vetor direção
    if(player.dir_x != 0 and player.dir_y != 0):
            tmp_normal = np.sqrt(np.power(player.dir_x, 2) + np.power(player.dir_y, 2))

            player.dir_x = player.dir_x / tmp_normal
            player.dir_y = player.dir_y / tmp_normal

    # Fornece a cor do pixel a frente do player
    color = screen.get_at((
                                int(player.x + player.dir_x * player.r*1.2),
                                int(player.y + player.dir_y * player.r*1.2)
                            ))
    if(color != (70,130,180)): # Se a cor do pixel for a proibida, o Player não se move
        if keys[pygame.K_d]:
            player.x += time*0.3
                
        if keys[pygame.K_a]:
            player.x -= time*0.3
                
        if keys[pygame.K_w]:
            player.y -= time*0.3
                
        if keys[pygame.K_s]:
            player.y += time*0.3

def Atualiza(ListaBots, local, time, player, keys, screen): # Realiza todas as atualizações de [ListaBots] em um determinado [local] com base em um certo [time]
    ListaR = ListaRect(ListaBots)                                  
    ListaD = ListaDist(ListaBots)
    AlertaB(ListaBots, ListaD)
    ColisaoB(ListaBots, ListaR)
    MovLimite(local, ListaBots, time)
    AlertaP(player, ListaBots, ListaD)
    ColisaoP(ListaBots, player)
    MovePlayer(player, keys, time, screen)
